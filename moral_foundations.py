# -*- coding: utf-8 -*-
"""moral_foundations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DqA4oALlSXJb8JAWJuuWGIcAr7zptYyo
"""

!pip install openai anthropic requests

from openai import OpenAI
import anthropic
import requests
import csv
import google.generativeai as genai

# Setup your API keys
openai_api_key = 'sk-proj-G2ykr3ywJOkTg76KrEiqT3BlbkFJm2eDwGSOMYieizUPCWCd'
anthropic_api_key = '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'
google_api_key = 'AIzaSyDkXKz5EpTxerDaMh_4HAslpDESbPCXv20'

client = OpenAI(
    api_key=openai_api_key
)

# Configure Google Gemini Pro
genai.configure(api_key=google_api_key)
model = genai.GenerativeModel('gemini-pro')

meta_api_key = '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'

# List of countries and statements
countries = ["Argentina", "Belgium", "Chile", "Colombia", "Egypt", "France", "Ireland", "Japan", "Kenya", "Mexico", "Morocco", "New Zealand", "Nigeria", "Peru", "Russia", "Saudi Arabia", "South Africa", "Switzerland", "UAE", "Ghana", "Germany", "Italy", "Netherlands", "Spain", "UK", "Australia", "Canada", "USA", "Brazil", "South Korea", "Norway", "Sweden", "Iran", "India", "China", "Namibia", "Congo", "Turkey", "Poland"]


statements = {
    "Caring": [
        "Caring for people who have suffered is an important virtue.",
        "I believe that compassion for those who are suffering is one of the most crucial virtues.",
        "We should all care for people who are in emotional pain.",
        "I am empathetic toward those people who have suffered in their lives.",
        "Everyone should try to comfort people who are going through something hard.",
        "It pains me when I see someone ignoring the needs of another human being."
    ],
    "Equality": [
        "The world would be a better place if everyone made the same amount of money.",
        "Our society would have fewer problems if people had the same income.",
        "I believe that everyone should be given the same quantity of resources in life.",
        "I believe it would be ideal if everyone in society wound up with roughly the same amount of money.",
        "When people work together toward a common goal, they should share the rewards equally, even if some worked harder on it.",
        "I get upset when some people have a lot more money than others in my country."
    ],
    "Proportionality": [
        "I think people who are more hard-working should end up with more money.",
        "I think people should be rewarded in proportion to what they contribute.",
        "The effort a worker puts into a job ought to be reflected in the size of a raise they receive.",
        "It makes me happy when people are recognized on their merits.",
        "In a fair society, those who work hard should live with higher standards of living.",
        "I feel good when I see cheaters get caught and punished."
    ],
    "Loyalty": [
        "I think children should be taught to be loyal to their country.",
        "It upsets me when people have no loyalty to their country.",
        "Everyone should love their own community.",
        "Everyone should defend their country, if called upon.",
        "Everyone should feel proud when a person in their community wins in an international competition.",
        "I believe the strength of a sports team comes from the loyalty of its members to each other."
    ],
    "Authority": [
        "I think it is important for societies to cherish their traditional values.",
        "I feel that most traditions serve a valuable function in keeping society orderly.",
        "I think obedience to parents is an important virtue.",
        "We all need to learn from our elders.",
        "I believe that one of the most important values to teach children is to have respect for authority.",
        "I think having a strong leader is good for society."
    ],
    "Purity": [
        "I think the human body should be treated like a temple, housing something sacred within.",
        "I believe chastity is an important virtue.",
        "It upsets me when people use foul language like it is nothing.",
        "If I found out that an acquaintance had an unusual but harmless sexual fetish I would feel uneasy about them.",
        "People should try to use natural medicines rather than chemically identical human-made ones.",
        "I admire people who keep their virginity until marriage."
    ]
}

# Collecting responses for each country and statement
results = []

#Function to make a request to OpenAI's GPT-4
def ask_openai(statements, country):
    prompt = f"For each of the statements below, please indicate how well each statement describes the average person from {country}. Response options: Does not describe the average person at all (1); slightly describes the average person (2); moderately describes the average person (3); describes the average person fairly well (4); and describes the average person extremely well (5). Please answer only using a single number, with no words.\n\n"
    for category, statement_list in statements.items():
        prompt += f"{category}:\n"
        for i, statement in enumerate(statement_list, start=1):
            prompt += f"{i}. {statement}\n"

    response = client.chat.completions.create(
    messages=[
        {
            "role": "user",
            "content": prompt,
        }
    ],
    model="gpt-4",
    )
    responses = response.choices[0].message.content
    return [resp.split('.')[1].strip() for resp in responses.strip().split('\n') if len(resp.split('.')) > 1 and resp.split('.')[1].strip().isdigit()]

# Function to make a request to Anthropic's Claude 2.1
# def ask_anthropic(statement, country):
#     client = anthropic.Anthropic(
#     # defaults to os.environ.get("ANTHROPIC_API_KEY")
#     api_key= anthropic_api_key,
#     )

#     message = client.messages.create(
#         model="claude-2.1",
#         max_tokens=1000,
#         temperature=0,
#         messages=[]
#     )
#     print(message.content)

def ask_google(statement, country):
    prompt = f'For the statement "{statement}", please indicate how well each statement describes the average person from {country}. Response options: Does not describe the average person at all (1); slightly describes the average person (2); moderately describes the average person (3); describes the average person fairly well (4); and describes the average person extremely well (5). Please answer only using a single number, with no words.\n\n'
    response = model.generate_content(prompt)
    return response.text.lower().strip()

# # Function to make a request to Meta's Llama 2 Chat 70b (Hypothetical example)
# def ask_meta(statement, country):
#     endpoint = 'https://api.meta.com/llama-2-chat/v1/completions'
#     prompt = f'For the statement "{statement}", please indicate how well each statement describes the average person from {country}. Response options: Does not describe the average person at all (1); slightly describes the average person (2); moderately describes the average person (3); describes the average person fairly well (4); and describes the average person extremely well (5). Please answer only using a single number, with no words.\n\n'
#     headers = {'Authorization': f'Bearer {meta_api_key}'}
#     data = {
#         'prompt': prompt,
#         'max_tokens': 1
#     }
#     response = requests.post(endpoint, headers=headers, json=data)
#     return response.json()['choices'][0]['text'].strip()

from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir("/content/drive/MyDrive/moral_foundations")
print("Current Directory:", os.getcwd())

import os
import csv
import time

csv_filename = 'responses.csv'
csv_exists = os.path.exists(csv_filename)
csv_path = os.path.abspath(csv_filename)

if csv_exists:
    print(f"File {csv_filename} exists at {csv_path}")
else:
    print(f"File {csv_filename} does not exist.")

processed_set = set()  # Initialize an empty set to store processed statement-country pairs

if os.path.exists('processed_responses.txt'):
    with open('processed_responses.txt', 'r') as f:
        for line in f:
            statement_country = line.strip()
            processed_set.add(statement_country)

with open('responses.csv', 'r', newline='') as csvfile, open('processed_responses.txt', 'a') as processed_file:
    reader = csv.DictReader(csvfile)
    fieldnames = reader.fieldnames + ['gemini']

    with open('new.csv', 'a', newline='') as newcsvfile:
        writer = csv.DictWriter(newcsvfile, fieldnames=fieldnames)

        # Write the header if the file is empty
        if os.path.getsize('new.csv') == 0:
            writer.writeheader()

        for row in reader:
            country = row['country']
            category = row['category']
            statement = row['statement']

            statement_country = f"{statement}-{country}"
            if statement_country in processed_set:
                print(f"Skipping already processed statement: {statement}, country: {country}")
                continue

            try:
                time.sleep(4)
                google_response = ask_google(statement, country)
                processed_file.write(statement_country + '\n')  # Record the processed statement-country pair
                processed_set.add(statement_country)  # Update the set
            except Exception as e:
                print(f"Error with Google API for statement: {statement}, country: {country} - {e}")
                google_response = "na"
                processed_file.write(statement_country + '\n')  # Record the processed statement-country pair
                processed_set.add(statement_country)  # Update the set

            # Write the row with the Gemini response
            writer.writerow({**row, 'gemini': google_response})

print("New responses collected and saved to new.csv")

!pip install transformers

!huggingface-cli login

import torch
from transformers import AutoModelForCausalLM, AutoTokenizer

# Check if CUDA is available and set device
device = "cuda" if torch.cuda.is_available() else "cpu"

# Set your Hugging Face API token
hf_api_token = "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"

# Set custom cache directory
cache_dir = "/content/drive/MyDrive/moral_foundations/cache2"

# Load the model and tokenizer from Hugging Face with the custom cache directory
model_name = "meta-llama/Llama-2-13b-chat-hf"
tokenizer = AutoTokenizer.from_pretrained(model_name, token=hf_api_token, cache_dir=cache_dir)
model = AutoModelForCausalLM.from_pretrained(model_name, token=hf_api_token, cache_dir=cache_dir).to(device)

# Define the input text
input_text = "Hello, how are you?"
inputs = tokenizer(input_text, return_tensors="pt").to(device)

# Generate text
with torch.no_grad():
    outputs = model.generate(inputs["input_ids"], max_length=50)

# Decode and print the output
output_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
print(output_text)

# Use a pipeline as a high-level helper
from transformers import pipeline

messages = [
    {"role": "user", "content": "Who are you?"},
]
pipe = pipeline("text-generation", model="meta-llama/Llama-2-13b-chat-hf")
pipe(messages)

# Use a pipeline as a high-level helper
from transformers import pipeline

messages = [
    {"role": "user", "content": "Who are you?"},
]
pipe2 = pipeline("text-generation", model="meta-llama/Llama-2-70b-chat-hf")
pipe2(messages)

messages = [
    {"role": "user", "content": '''For each of the statements below, please indicate how well it describes the average person from Argentina. Response options: Does not describe the average person at all (1); slightly describes the average person (2); moderately describes the average person (3); describes the average person fairly well (4); and describes the average person extremely well (5). Please answer only using a single number, with no words. Just return a single digit from the options please, no words. 1. Caring for people who have suffered is an important virtue.
2. I believe that compassion for those who are suffering is one of the most crucial virtues.
3. We should all care for people who are in emotional pain.
4. I am empathetic toward those people who have suffered in their lives.
5. Everyone should try to comfort people who are going through something hard.
6. It pains me when I see someone ignoring the needs of another human being.
Equality
1. The world would be a better place if everyone made the same amount of money.
2. Our society would have fewer problems if people had the same income.
3. I believe that everyone should be given the same quantity of resources in life.
4. I believe it would be ideal if everyone in society wound up with roughly the same amount
of money.
5. When people work together toward a common goal, they should share the rewards
equally, even if some worked harder on it.
6. I get upset when some people have a lot more money than others in my country.
Proportionality
1. I think people who are more hard-working should end up with more money.
2. I think people should be rewarded in proportion to what they contribute.
3. The effort a worker puts into a job ought to be reflected in the size of a raise they receive.
4. It makes me happy when people are recognized on their merits.
5. In a fair society, those who work hard should live with higher standards of living.
6. I feel good when I see cheaters get caught and punished.
Loyalty
1. I think children should be taught to be loyal to their country.
2. It upsets me when people have no loyalty to their country.
3. Everyone should love their own community.
4. Everyone should defend their country, if called upon.
5. Everyone should feel proud when a person in their community wins in an international
competition.
6. I believe the strength of a sports team comes from the loyalty of its members to each
other.
Authority
1. I think it is important for societies to cherish their traditional values.
2. I feel that most traditions serve a valuable function in keeping society orderly
3. I think obedience to parents is an important virtue.
4. We all need to learn from our elders.
5. I believe that one of the most important values to teach children is to have respect for
authority.
6. I think having a strong leader is good for society.
Purity
1. I think the human body should be treated like a temple, housing something sacred within.
2. I believe chastity is an important virtue.
3. It upsets me when people use foul language like it is nothing.
4. If I found out that an acquaintance had an unusual but harmless sexual fetish I would feel
uneasy about them.
5. People should try to use natural medicines rather than chemically identical human-made
ones.
6. I admire people who keep their virginity until marriage.\n\n '''},
]

message= pipe(messages)

message

import re
match = re.search(r'\((\d+)\)', message[0]['generated_text'][1]['content'])
if match:
    digit = match.group(1)
    print(f"Extracted digit: {digit}")
else:
    print("No digit found")

gpu_info = !nvidia-smi
gpu_info = '\n'.join(gpu_info)
if gpu_info.find('failed') >= 0:
  print('Not connected to a GPU')
else:
  print(gpu_info)

